# Generated by Django 4.2.24 on 2025-09-15 18:36

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('moderator', 'Moderator'), ('admin', 'Administrator')], default='member', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('suspended', 'Suspended'), ('left', 'Left Group')], default='pending', max_length=20)),
                ('can_create_sessions', models.BooleanField(default=True)),
                ('can_view_all_data', models.BooleanField(default=True)),
                ('can_export_data', models.BooleanField(default=False)),
                ('can_invite_members', models.BooleanField(default=False)),
                ('contributions_count', models.IntegerField(default=0)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-joined_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_magnification', models.CharField(default='400x', max_length=50)),
                ('preferred_units', models.CharField(choices=[('metric', 'Metric (μm, °C, mg/L)'), ('imperial', 'Imperial (mil, °F, ppm)')], default='metric', max_length=20)),
                ('confidence_threshold', models.FloatField(default=0.7)),
                ('auto_save_detections', models.BooleanField(default=True)),
                ('show_scientific_names', models.BooleanField(default=True)),
                ('show_common_names', models.BooleanField(default=True)),
                ('default_chart_type', models.CharField(choices=[('bar', 'Bar Chart'), ('line', 'Line Chart'), ('pie', 'Pie Chart'), ('scatter', 'Scatter Plot')], default='bar', max_length=20)),
                ('color_scheme', models.CharField(choices=[('default', 'Default'), ('dark', 'Dark Mode'), ('high_contrast', 'High Contrast'), ('colorblind', 'Colorblind Friendly')], default='default', max_length=20)),
                ('default_export_format', models.CharField(choices=[('csv', 'CSV'), ('excel', 'Excel'), ('json', 'JSON')], default='csv', max_length=10)),
                ('include_images_in_export', models.BooleanField(default=False)),
                ('preferred_video_quality', models.CharField(choices=[('480p', '480p'), ('720p', '720p'), ('1080p', '1080p'), ('auto', 'Auto')], default='auto', max_length=20)),
                ('enable_real_time_overlay', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ResearchGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False)),
                ('allow_member_invites', models.BooleanField(default=True)),
                ('require_approval', models.BooleanField(default=True)),
                ('research_areas', models.JSONField(default=list)),
                ('target_organisms', models.JSONField(default=list)),
                ('geographic_focus', models.JSONField(default=list)),
                ('share_detection_data', models.BooleanField(default=True)),
                ('share_analysis_results', models.BooleanField(default=True)),
                ('collaborative_reports', models.BooleanField(default=True)),
                ('total_sessions', models.IntegerField(default=0)),
                ('total_detections', models.IntegerField(default=0)),
                ('active_members_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('members', models.ManyToManyField(related_name='research_groups', through='users.GroupMembership', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='groupmembership',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.researchgroup'),
        ),
        migrations.AddField(
            model_name='groupmembership',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('user_type', models.CharField(choices=[('researcher', 'Marine Researcher'), ('biologist', 'Marine Biologist'), ('fishery_manager', 'Fishery Manager'), ('environmental_monitor', 'Environmental Monitor'), ('student', 'Student'), ('technician', 'Lab Technician'), ('consultant', 'Environmental Consultant'), ('government', 'Government Official')], max_length=30)),
                ('organization', models.CharField(blank=True, max_length=200)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('job_title', models.CharField(blank=True, max_length=100)),
                ('expertise_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('specializations', models.JSONField(default=list, help_text='Areas of marine biology specialization')),
                ('research_interests', models.TextField(blank=True)),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('country', models.CharField(blank=True, max_length=100)),
                ('institution', models.CharField(blank=True, max_length=200)),
                ('website', models.URLField(blank=True)),
                ('degree', models.CharField(blank=True, max_length=100)),
                ('certifications', models.JSONField(default=list)),
                ('publications_count', models.IntegerField(default=0)),
                ('years_experience', models.IntegerField(default=0)),
                ('can_create_public_reports', models.BooleanField(default=False)),
                ('can_moderate_content', models.BooleanField(default=False)),
                ('can_access_advanced_analysis', models.BooleanField(default=False)),
                ('can_export_data', models.BooleanField(default=True)),
                ('email_notifications', models.BooleanField(default=True)),
                ('alert_notifications', models.BooleanField(default=True)),
                ('weekly_reports', models.BooleanField(default=False)),
                ('research_updates', models.BooleanField(default=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/pictures/')),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('is_public_profile', models.BooleanField(default=False)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('total_sessions', models.IntegerField(default=0)),
                ('total_detections', models.IntegerField(default=0)),
                ('favorite_organisms', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['user__username'],
                'indexes': [models.Index(fields=['user_type'], name='users_userp_user_ty_798b6e_idx'), models.Index(fields=['organization'], name='users_userp_organiz_dc3df3_idx'), models.Index(fields=['expertise_level'], name='users_userp_experti_49ecbd_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('notification_type', models.CharField(choices=[('detection_alert', 'Detection Alert'), ('harmful_organism', 'Harmful Organism Alert'), ('analysis_complete', 'Analysis Complete'), ('group_invitation', 'Group Invitation'), ('system_update', 'System Update'), ('data_export_ready', 'Data Export Ready'), ('weekly_report', 'Weekly Report'), ('stream_invitation', 'Stream Invitation')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('action_url', models.URLField(blank=True, help_text='URL to navigate when notification is clicked')),
                ('action_data', models.JSONField(default=dict, help_text='Additional data for the action')),
                ('is_read', models.BooleanField(default=False)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'is_read', '-created_at'], name='users_usern_user_id_134cff_idx'), models.Index(fields=['notification_type', '-created_at'], name='users_usern_notific_9e8a64_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('login', 'User Login'), ('logout', 'User Logout'), ('session_start', 'Detection Session Started'), ('session_end', 'Detection Session Ended'), ('detection', 'Organism Detected'), ('verification', 'Detection Verified'), ('export', 'Data Exported'), ('report_generated', 'Report Generated'), ('stream_start', 'Stream Started'), ('stream_join', 'Joined Stream'), ('group_join', 'Joined Research Group'), ('settings_change', 'Settings Changed')], max_length=30)),
                ('description', models.CharField(max_length=500)),
                ('details', models.JSONField(default=dict, help_text='Additional activity details')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('session_id', models.CharField(blank=True, max_length=255)),
                ('detection_session_id', models.UUIDField(blank=True, null=True)),
                ('organism_id', models.IntegerField(blank=True, null=True)),
                ('group_id', models.UUIDField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', '-timestamp'], name='users_usera_user_id_832d5b_idx'), models.Index(fields=['activity_type', '-timestamp'], name='users_usera_activit_bcb95e_idx')],
            },
        ),
        migrations.AlterUniqueTogether(
            name='groupmembership',
            unique_together={('user', 'group')},
        ),
    ]
