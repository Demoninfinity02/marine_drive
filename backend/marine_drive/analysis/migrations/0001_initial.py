# Generated by Django 4.2.24 on 2025-09-15 18:36

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organisms', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('detection', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalysisReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('report_type', models.CharField(choices=[('session', 'Single Session Analysis'), ('comparative', 'Comparative Analysis'), ('temporal', 'Temporal Trend Analysis'), ('biodiversity', 'Biodiversity Assessment'), ('environmental', 'Environmental Impact Analysis'), ('health_safety', 'Health & Safety Report')], max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('location_filter', models.CharField(blank=True, max_length=200)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('is_public', models.BooleanField(default=False)),
                ('executive_summary', models.TextField()),
                ('methodology', models.TextField()),
                ('key_findings', models.JSONField(default=dict)),
                ('recommendations', models.TextField(blank=True)),
                ('total_organisms_analyzed', models.IntegerField(default=0)),
                ('species_diversity_count', models.IntegerField(default=0)),
                ('biodiversity_indices', models.JSONField(default=dict)),
                ('environmental_correlations', models.JSONField(default=dict)),
                ('harmful_species_detected', models.JSONField(default=list)),
                ('risk_assessment', models.TextField(blank=True)),
                ('alert_summary', models.JSONField(default=dict)),
                ('report_pdf', models.FileField(blank=True, null=True, upload_to='reports/pdf/')),
                ('data_export_csv', models.FileField(blank=True, null=True, upload_to='reports/csv/')),
                ('visualization_images', models.JSONField(default=list)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_reports', to=settings.AUTH_USER_MODEL)),
                ('sessions', models.ManyToManyField(related_name='analysis_reports', to='detection.detectionsession')),
            ],
            options={
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='EnvironmentalCorrelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('correlation_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('temperature_range', models.JSONField(default=dict)),
                ('salinity_range', models.JSONField(default=dict)),
                ('ph_range', models.JSONField(default=dict)),
                ('oxygen_range', models.JSONField(default=dict)),
                ('temperature_organism_correlation', models.JSONField(default=dict)),
                ('salinity_organism_correlation', models.JSONField(default=dict)),
                ('ph_organism_correlation', models.JSONField(default=dict)),
                ('oxygen_organism_correlation', models.JSONField(default=dict)),
                ('correlation_p_values', models.JSONField(default=dict)),
                ('sample_size', models.IntegerField(default=0)),
                ('stress_indicators', models.JSONField(default=list)),
                ('optimal_conditions', models.JSONField(default=dict)),
                ('tolerance_ranges', models.JSONField(default=dict)),
                ('temperature_trend_analysis', models.JSONField(default=dict)),
                ('species_migration_indicators', models.JSONField(default=list)),
                ('analysis_date', models.DateTimeField(auto_now_add=True)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='env_correlations', to='analysis.analysisreport')),
            ],
        ),
        migrations.CreateModel(
            name='DataExport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('export_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('export_format', models.CharField(choices=[('csv', 'CSV'), ('excel', 'Excel'), ('json', 'JSON'), ('pdf', 'PDF Report')], max_length=10)),
                ('date_range_start', models.DateTimeField()),
                ('date_range_end', models.DateTimeField()),
                ('organism_filters', models.JSONField(default=dict)),
                ('location_filters', models.JSONField(default=dict)),
                ('confidence_threshold', models.FloatField(default=0.0)),
                ('include_images', models.BooleanField(default=False)),
                ('include_environmental_data', models.BooleanField(default=True)),
                ('include_statistics', models.BooleanField(default=True)),
                ('include_taxonomy', models.BooleanField(default=True)),
                ('export_file', models.FileField(blank=True, null=True, upload_to='exports/')),
                ('file_size_mb', models.FloatField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('download_count', models.IntegerField(default=0)),
                ('last_downloaded', models.DateTimeField(blank=True, null=True)),
                ('sessions', models.ManyToManyField(related_name='data_exports', to='detection.detectionsession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_exports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='ComparativeAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comparison_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('comparison_type', models.CharField(choices=[('location', 'Location Comparison'), ('temporal', 'Time Period Comparison'), ('seasonal', 'Seasonal Comparison'), ('treatment', 'Treatment Comparison')], max_length=20)),
                ('group_definitions', models.JSONField(default=dict)),
                ('sample_sizes', models.JSONField(default=dict)),
                ('species_richness_comparison', models.JSONField(default=dict)),
                ('abundance_comparison', models.JSONField(default=dict)),
                ('diversity_indices_comparison', models.JSONField(default=dict)),
                ('anova_results', models.JSONField(default=dict)),
                ('t_test_results', models.JSONField(default=dict)),
                ('chi_square_results', models.JSONField(default=dict)),
                ('jaccard_similarity', models.JSONField(default=dict)),
                ('bray_curtis_similarity', models.JSONField(default=dict)),
                ('significant_differences', models.JSONField(default=list)),
                ('effect_sizes', models.JSONField(default=dict)),
                ('ecological_significance', models.TextField(blank=True)),
                ('management_implications', models.TextField(blank=True)),
                ('analysis_date', models.DateTimeField(auto_now_add=True)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparative_analyses', to='analysis.analysisreport')),
            ],
        ),
        migrations.CreateModel(
            name='BiodiversityAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('shannon_diversity_index', models.FloatField(blank=True, null=True)),
                ('simpson_diversity_index', models.FloatField(blank=True, null=True)),
                ('evenness_index', models.FloatField(blank=True, null=True)),
                ('richness_index', models.FloatField(blank=True, null=True)),
                ('dominant_species', models.JSONField(default=list)),
                ('rare_species', models.JSONField(default=list)),
                ('endemic_species', models.JSONField(default=list)),
                ('invasive_species', models.JSONField(default=list)),
                ('primary_producers_count', models.IntegerField(default=0)),
                ('primary_consumers_count', models.IntegerField(default=0)),
                ('secondary_consumers_count', models.IntegerField(default=0)),
                ('decomposers_count', models.IntegerField(default=0)),
                ('functional_group_distribution', models.JSONField(default=dict)),
                ('trophic_pyramid_data', models.JSONField(default=dict)),
                ('ecosystem_health_score', models.FloatField(blank=True, help_text='Score 0-100', null=True)),
                ('pollution_indicator_species', models.JSONField(default=list)),
                ('climate_indicator_species', models.JSONField(default=list)),
                ('carbon_fixation_potential', models.FloatField(blank=True, null=True)),
                ('carbon_sequestration_organisms', models.JSONField(default=list)),
                ('analysis_date', models.DateTimeField(auto_now_add=True)),
                ('confidence_level', models.FloatField(default=95.0, help_text='Statistical confidence level')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biodiversity_analyses', to='analysis.analysisreport')),
            ],
        ),
        migrations.CreateModel(
            name='TrendAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trend_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('time_series_data', models.JSONField(default=dict, help_text='Timestamp: count pairs')),
                ('trend_direction', models.CharField(choices=[('increasing', 'Increasing'), ('decreasing', 'Decreasing'), ('stable', 'Stable'), ('fluctuating', 'Fluctuating'), ('seasonal', 'Seasonal Pattern')], max_length=20)),
                ('trend_slope', models.FloatField(blank=True, null=True)),
                ('r_squared', models.FloatField(blank=True, null=True)),
                ('p_value', models.FloatField(blank=True, null=True)),
                ('confidence_interval', models.JSONField(default=dict)),
                ('seasonal_patterns', models.JSONField(default=dict)),
                ('peak_months', models.JSONField(default=list)),
                ('low_months', models.JSONField(default=list)),
                ('forecast_data', models.JSONField(default=dict)),
                ('forecast_confidence', models.FloatField(blank=True, null=True)),
                ('anomalies_detected', models.JSONField(default=list)),
                ('anomaly_thresholds', models.JSONField(default=dict)),
                ('population_stability', models.CharField(blank=True, choices=[('stable', 'Stable'), ('at_risk', 'At Risk'), ('declining', 'Declining'), ('recovering', 'Recovering'), ('blooming', 'Blooming')], max_length=20)),
                ('ecological_impact_assessment', models.TextField(blank=True)),
                ('analysis_date', models.DateTimeField(auto_now_add=True)),
                ('organism', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trend_analyses', to='organisms.marineorganism')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trend_analyses', to='analysis.analysisreport')),
            ],
            options={
                'unique_together': {('report', 'organism')},
            },
        ),
        migrations.AddIndex(
            model_name='analysisreport',
            index=models.Index(fields=['generated_by', '-generated_at'], name='analysis_an_generat_3d9338_idx'),
        ),
        migrations.AddIndex(
            model_name='analysisreport',
            index=models.Index(fields=['report_type'], name='analysis_an_report__b0528e_idx'),
        ),
        migrations.AddIndex(
            model_name='analysisreport',
            index=models.Index(fields=['start_date', 'end_date'], name='analysis_an_start_d_72944d_idx'),
        ),
    ]
