# Generated by Django 4.2.24 on 2025-09-15 18:36

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organisms', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DetectionSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('sample_location', models.CharField(help_text='Geographic location of sample', max_length=200)),
                ('sample_coordinates_lat', models.FloatField(blank=True, null=True)),
                ('sample_coordinates_lng', models.FloatField(blank=True, null=True)),
                ('sample_depth', models.FloatField(blank=True, help_text='Depth in meters', null=True)),
                ('sample_volume', models.FloatField(help_text='Sample volume in milliliters', validators=[django.core.validators.MinValueValidator(0.1)])),
                ('water_temperature', models.FloatField(blank=True, help_text='Temperature in Celsius', null=True)),
                ('salinity', models.FloatField(blank=True, help_text='Salinity in PSU', null=True)),
                ('ph_level', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(14)])),
                ('dissolved_oxygen', models.FloatField(blank=True, help_text='DO in mg/L', null=True)),
                ('microscope_magnification', models.CharField(default='400x', max_length=50)),
                ('ml_model_version', models.CharField(default='v1.0', max_length=50)),
                ('confidence_threshold', models.FloatField(default=0.7, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(1.0)])),
                ('total_frames_processed', models.IntegerField(default=0)),
                ('total_organisms_detected', models.IntegerField(default=0)),
                ('unique_species_count', models.IntegerField(default=0)),
                ('notes', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detection_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='DetectionStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organisms_by_kingdom', models.JSONField(default=dict)),
                ('organisms_by_phylum', models.JSONField(default=dict)),
                ('organisms_by_class', models.JSONField(default=dict)),
                ('organisms_by_genus', models.JSONField(default=dict)),
                ('total_concentration_per_ml', models.FloatField(default=0.0)),
                ('harmful_organisms_per_ml', models.FloatField(default=0.0)),
                ('biodiversity_index', models.FloatField(blank=True, help_text='Shannon diversity index', null=True)),
                ('temperature_organism_correlation', models.JSONField(default=dict)),
                ('salinity_organism_correlation', models.JSONField(default=dict)),
                ('detection_rate_per_minute', models.JSONField(default=dict)),
                ('peak_detection_time', models.DateTimeField(blank=True, null=True)),
                ('average_confidence_score', models.FloatField(default=0.0)),
                ('verification_rate', models.FloatField(default=0.0, help_text='Percentage of verified detections')),
                ('calculated_at', models.DateTimeField(auto_now=True)),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='detection.detectionsession')),
            ],
        ),
        migrations.CreateModel(
            name='DetectionResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detection_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('frame_number', models.IntegerField(help_text='Video frame number where detected')),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('model_version', models.CharField(default='v1.0', max_length=50)),
                ('bbox_x', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('bbox_y', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('bbox_width', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('bbox_height', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('measured_size', models.FloatField(blank=True, help_text='Size in micrometers', null=True)),
                ('measured_area', models.FloatField(blank=True, help_text='Area in square micrometers', null=True)),
                ('detection_image', models.ImageField(blank=True, null=True, upload_to='detections/images/')),
                ('cropped_organism_image', models.ImageField(blank=True, null=True, upload_to='detections/crops/')),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_notes', models.TextField(blank=True)),
                ('is_false_positive', models.BooleanField(default=False)),
                ('features_json', models.JSONField(default=dict, help_text='Additional features extracted by ML model')),
                ('organism', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detection_results', to='organisms.marineorganism')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detections', to='detection.detectionsession')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_detections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='LiveDetectionAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('alert_type', models.CharField(choices=[('harmful_organism', 'Harmful Organism Detected'), ('high_concentration', 'High Organism Concentration'), ('unusual_species', 'Unusual Species Detected'), ('bloom_warning', 'Potential Algal Bloom'), ('environmental_anomaly', 'Environmental Parameter Anomaly')], max_length=30)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('detection_count', models.IntegerField(default=1)),
                ('concentration_per_ml', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolution_notes', models.TextField(blank=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('organism', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='organisms.marineorganism')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='detection.detectionsession')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['session', '-created_at'], name='detection_l_session_3ab34b_idx'), models.Index(fields=['alert_type', 'severity'], name='detection_l_alert_t_9fdc1f_idx'), models.Index(fields=['is_active', 'is_resolved'], name='detection_l_is_acti_92f2d4_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='detectionsession',
            index=models.Index(fields=['user', '-start_time'], name='detection_d_user_id_ad88d4_idx'),
        ),
        migrations.AddIndex(
            model_name='detectionsession',
            index=models.Index(fields=['sample_location'], name='detection_d_sample__574749_idx'),
        ),
        migrations.AddIndex(
            model_name='detectionsession',
            index=models.Index(fields=['is_active'], name='detection_d_is_acti_30b470_idx'),
        ),
        migrations.AddIndex(
            model_name='detectionresult',
            index=models.Index(fields=['session', '-detected_at'], name='detection_d_session_d0b598_idx'),
        ),
        migrations.AddIndex(
            model_name='detectionresult',
            index=models.Index(fields=['organism', '-detected_at'], name='detection_d_organis_631676_idx'),
        ),
        migrations.AddIndex(
            model_name='detectionresult',
            index=models.Index(fields=['confidence_score'], name='detection_d_confide_13677f_idx'),
        ),
        migrations.AddIndex(
            model_name='detectionresult',
            index=models.Index(fields=['is_verified'], name='detection_d_is_veri_80eaad_idx'),
        ),
    ]
