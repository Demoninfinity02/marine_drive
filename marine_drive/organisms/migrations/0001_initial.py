# Generated by Django 4.2.24 on 2025-09-15 18:36

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MarineOrganism',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('common_name', models.CharField(blank=True, max_length=200)),
                ('scientific_name', models.CharField(max_length=200, unique=True)),
                ('typical_size_min', models.FloatField(help_text='Minimum size in micrometers', validators=[django.core.validators.MinValueValidator(0.1)])),
                ('typical_size_max', models.FloatField(help_text='Maximum size in micrometers', validators=[django.core.validators.MinValueValidator(0.1)])),
                ('optimal_temperature_min', models.FloatField(blank=True, help_text='Minimum optimal temperature in Celsius', null=True)),
                ('optimal_temperature_max', models.FloatField(blank=True, help_text='Maximum optimal temperature in Celsius', null=True)),
                ('salinity_tolerance_min', models.FloatField(blank=True, help_text='Minimum salinity tolerance in PSU', null=True)),
                ('salinity_tolerance_max', models.FloatField(blank=True, help_text='Maximum salinity tolerance in PSU', null=True)),
                ('trophic_level', models.CharField(blank=True, choices=[('primary_producer', 'Primary Producer'), ('primary_consumer', 'Primary Consumer'), ('secondary_consumer', 'Secondary Consumer'), ('decomposer', 'Decomposer')], max_length=50)),
                ('is_harmful', models.BooleanField(default=False, help_text='Indicates if organism is toxic or harmful')),
                ('toxicity_level', models.CharField(choices=[('none', 'Non-toxic'), ('low', 'Low toxicity'), ('moderate', 'Moderate toxicity'), ('high', 'High toxicity'), ('extreme', 'Extremely toxic')], default='none', max_length=20)),
                ('carbon_sequestration_importance', models.CharField(choices=[('low', 'Low importance'), ('moderate', 'Moderate importance'), ('high', 'High importance'), ('critical', 'Critical importance')], default='low', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('identification_notes', models.TextField(blank=True, help_text='Key features for ML model identification')),
                ('reference_image', models.ImageField(blank=True, null=True, upload_to='organisms/references/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['scientific_name'],
            },
        ),
        migrations.CreateModel(
            name='TaxonomyRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('level', models.IntegerField()),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='organisms.taxonomyrank')),
            ],
            options={
                'ordering': ['level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='OrganismDetectionProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_confidence_threshold', models.FloatField(default=0.7, help_text='Minimum confidence score for detection', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(1.0)])),
                ('shape_descriptors', models.JSONField(default=dict, help_text='Shape features for ML model')),
                ('color_profile', models.JSONField(default=dict, help_text='Color characteristics')),
                ('texture_features', models.JSONField(default=dict, help_text='Texture analysis features')),
                ('total_detections', models.IntegerField(default=0)),
                ('successful_identifications', models.IntegerField(default=0)),
                ('false_positives', models.IntegerField(default=0)),
                ('last_detection', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organism', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='detection_profile', to='organisms.marineorganism')),
            ],
        ),
        migrations.AddField(
            model_name='marineorganism',
            name='class_name',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='class_organisms', to='organisms.taxonomyrank'),
        ),
        migrations.AddField(
            model_name='marineorganism',
            name='family',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='family_organisms', to='organisms.taxonomyrank'),
        ),
        migrations.AddField(
            model_name='marineorganism',
            name='genus',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='genus_organisms', to='organisms.taxonomyrank'),
        ),
        migrations.AddField(
            model_name='marineorganism',
            name='kingdom',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='kingdom_organisms', to='organisms.taxonomyrank'),
        ),
        migrations.AddField(
            model_name='marineorganism',
            name='order',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_organisms', to='organisms.taxonomyrank'),
        ),
        migrations.AddField(
            model_name='marineorganism',
            name='phylum',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='phylum_organisms', to='organisms.taxonomyrank'),
        ),
        migrations.AddField(
            model_name='marineorganism',
            name='species',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='species_organisms', to='organisms.taxonomyrank'),
        ),
        migrations.AddIndex(
            model_name='marineorganism',
            index=models.Index(fields=['scientific_name'], name='organisms_m_scienti_24dca1_idx'),
        ),
        migrations.AddIndex(
            model_name='marineorganism',
            index=models.Index(fields=['common_name'], name='organisms_m_common__12a3bf_idx'),
        ),
        migrations.AddIndex(
            model_name='marineorganism',
            index=models.Index(fields=['is_harmful'], name='organisms_m_is_harm_3b3976_idx'),
        ),
        migrations.AddIndex(
            model_name='marineorganism',
            index=models.Index(fields=['genus', 'species'], name='organisms_m_genus_i_21f381_idx'),
        ),
    ]
